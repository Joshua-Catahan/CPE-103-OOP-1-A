{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Joshua-Catahan/CPE-103-OOP-1-A/blob/main/CPE%20103%20Laboratory%20No.2.2%20-%20Literals%2C%20Operators%2C%20and%20Variables-Supplementary%20Activity\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "CCbtrQ8vD153"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xUKw6dtiGo-r"
      },
      "source": [
        "---\n",
        "<center>\n",
        "\n",
        "**University of Caloocan City**<br>\n",
        "Computer Engineering Department<br>\n",
        "Bagong Silang Campus</center>\n",
        "\n",
        "---\n",
        "<center><h4> Activity No. and Title: CPE 103 Laboratory No.2.2 - Literals, Operators, and Variables-Supplementary Activity </h4></center>\n",
        "\n",
        "---\n",
        "<center>\n",
        "\n",
        "| Course: CPE 103 | Program: BSCpE |\n",
        "|--- | --- |\n",
        "| **Course Title**: Object Oriented Programming | **Date Performed:** Feb. 1, 2025 |\n",
        "| **Section**: 1A  | **Date Submitted:** Feb. 7, 2025 |\n",
        "| **Student Name**: CATAHAN, JOSHUA A. | **Instructor's Name:** ENGR. MARIA RIZETTE SAYO |\n",
        "</center>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Objective/s of the activity:**\n",
        "\n",
        "1. This activity aims to familiarize students with using literals and variables in Python, applying them to calculate student grades, and properly document the program with comments and Markdown\n",
        "\n",
        "**Intended Learning Outcome:**\n",
        "\n",
        "1.\tWrite a simple program implementing literals and variables.\n",
        "2.\tUse comments and identify keywords from identifiers created by users.\n",
        "\n",
        "**Discussion:**\n",
        "\n",
        "In Python, variables are used to store values that can change during the program. For example, if you’re working on a program that collects the user’s age, you’d store that value in a variable, let’s say age. This makes it easy to update the value every time the user provides input. On the contrary, constants are values that remain the same throughout the program. For instance, if you’re working on a program that calculates the area of a circle, you could use a constant like PI = 3.14, which represents the value of pi and is used whenever needed. Literals are fixed values that appear directly in the code. For example, when you write radius = 10, the number 10 is a literal representing the radius. The main difference is that variables can change their values throughout the program, constants stay the same once defined, and literals are direct values used in expressions or assignments. By using these elements, the program becomes more organized and easier to maintain.\n",
        "\n",
        "\n",
        "\n",
        "**Materials and Equipment:**\n",
        "\n",
        "1.   Desktop Computer with Anaconda Python /Python Colab\n",
        "2.   Windows Operating System\n",
        "\n",
        "**Procedure:**\n",
        "\n",
        "1. I opened the Google Colab from the repository of our professor.\n",
        "\n",
        "2. I analyzed the given task and formulated the appropriate computations and codes to get the following outputs.\n",
        "\n",
        "3. I then implemented and executed the code to obtain the required results\n",
        "**Task:**\n",
        "\n",
        "A teacher wants to calculate the final grade in a CpE course and want to write it in a python program. The following are the requirements:\n",
        "1.\tPRELIM GRADE = 50% Prelim Exam + 50% Prelim Class Standing (CS)\n",
        "2.\tPRELIM CS = 50% Hands-on activity + 30% Quiz + 20% Assignment\n",
        "3.\tMIDTERM GRADE = 1/3 of PRELIM GRADE + 2/3 of (50% Midterm Exam + 50% Midterm Class Standing (CS))\n",
        "4.\tMIDTERM CS = 50% Hands-on activity + 30% Quiz + 20% Assignment\n",
        "5.\tFINAL GRADE = 1/3 of MIDTERM GRADE + 2/3 of (50% Final Exam + 50% Final Class Standing (CS))\n",
        "6.\tFINAL CS = 50% Hands-on activity + 30% Quiz + 20% Assignment\n",
        "7.\tHOAs, Quizzes and Assignments are inputted as average of all submissions and are out of 100%.\n",
        "8.\tMajor exams are inputted out of 100%.\n",
        "9.\tShow the codes that successfully run the program.\n",
        "10.\tProvide comments or documentation strings for your program.\n"
      ],
      "metadata": {
        "id": "gNe4D_l5JGiM"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "CODE: TASK TRIAL"
      ],
      "metadata": {
        "id": "0ZYXfHdiuJZA"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import sys  # Library for termination of the code\n",
        "\n",
        "# Function to get and validate scores\n",
        "def get_score(name):\n",
        "    score = float(input(f\"Enter {name} (100 ITEMS): \"))\n",
        "    if score < 0 or score > 100:\n",
        "        print(\"Invalid Input! PLEASE RESTART THE CODE\")\n",
        "        sys.exit()\n",
        "    return score\n",
        "\n",
        "# Function to calculate grades\n",
        "def calculate_prelim_midterm(cs, exam):\n",
        "    return cs * 0.5 + exam * 0.5\n",
        "\n",
        "def calculate_final(prev_grade, cs, exam):\n",
        "    return (prev_grade * 1 / 3) + (2 / 3) * (cs * 0.5 + exam * 0.5)\n",
        "\n",
        "# Main Program\n",
        "name = input(\"Enter name: \")\n",
        "print(\"<><><><><><><><><><><><><><><><><>\")  # SPACE\n",
        "\n",
        "# PRELIM GRADE\n",
        "print(\"ENTER THE PRELIM SCORES: \")\n",
        "PHOA, PQUIZ, PAS = get_score(\"prelim hands-on activity grade\"), get_score(\"prelim quiz grade\"), get_score(\"prelim assignment grade\")\n",
        "PCS = PHOA * 0.5 + PQUIZ * 0.3 + PAS * 0.2\n",
        "print(\"Prelim Class Standing (CS) is: \", PCS)\n",
        "PEX = get_score(\"prelim exam score\")\n",
        "PG = calculate_prelim_midterm(PCS, PEX)\n",
        "print(\"Prelim Grade is: \", PG)\n",
        "print(\"----------------------\")  # SPACE\n",
        "\n",
        "# MIDTERM GRADE\n",
        "print(\"ENTER THE MIDTERM SCORES: \")\n",
        "MHOA, MQUIZ, MAS = get_score(\"midterm hands-on activity grade\"), get_score(\"midterm quiz grade\"), get_score(\"midterm assignment grade\")\n",
        "MCS = MHOA * 0.5 + MQUIZ * 0.3 + MAS * 0.2\n",
        "print(\"Midterm Class Standing (CS) is: \", MCS)\n",
        "MEX = get_score(\"midterm exam score\")\n",
        "MG = calculate_prelim_midterm(MCS, MEX)\n",
        "print(\"Midterm Grade is: \", MG)\n",
        "print(\"----------------------\")  # SPACE\n",
        "\n",
        "# FINAL GRADE\n",
        "print(\"ENTER THE FINAL SCORES: \")\n",
        "FHOA, FQUIZ, FAS = get_score(\"final hands-on activity grade\"), get_score(\"final quiz grade\"), get_score(\"final assignment grade\")\n",
        "FCS = FHOA * 0.5 + FQUIZ * 0.3 + FAS * 0.2\n",
        "print(\"Final Class Standing (CS) is: \", FCS)\n",
        "FEX = get_score(\"final exam score\")\n",
        "FG = calculate_final(MG, FCS, FEX)\n",
        "print(\"Final Grade is: \", FG)\n",
        "print(\"----------------------\")  # SPACE\n",
        "\n",
        "# SUMMARY\n",
        "print(\"~~~~~~~~~~~~~~~~~~~~~~~~~~\")  # SPACE\n",
        "print(\"SUMMARY OF THE STUDENT GRADES\")\n",
        "print(f\"Name: {name}\\nPRELIM GRADE: {PG}\\nMIDTERM GRADE: {MG}\\nFINAL GRADE: {FG}\")\n",
        "print(\"~~~~~~~~~~~~~~~~~~~~~~~~~~\")  # SPACE"
      ],
      "metadata": {
        "id": "WORPHnvZKBVE",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "369f8996-9ebd-4fff-e994-cc707ff2b0f0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter name: TASK TRIAL\n",
            "<><><><><><><><><><><><><><><><><>\n",
            "ENTER THE PRELIM SCORES: \n",
            "Enter prelim hands-on activity grade (100 ITEMS): 100\n",
            "Enter prelim quiz grade (100 ITEMS): 100\n",
            "Enter prelim assignment grade (100 ITEMS): 100\n",
            "Prelim Class Standing (CS) is:  100.0\n",
            "Enter prelim exam score (100 ITEMS): 100\n",
            "Prelim Grade is:  100.0\n",
            "----------------------\n",
            "ENTER THE MIDTERM SCORES: \n",
            "Enter midterm hands-on activity grade (100 ITEMS): 100\n",
            "Enter midterm quiz grade (100 ITEMS): 100\n",
            "Enter midterm assignment grade (100 ITEMS): 100\n",
            "Midterm Class Standing (CS) is:  100.0\n",
            "Enter midterm exam score (100 ITEMS): 100\n",
            "Midterm Grade is:  100.0\n",
            "----------------------\n",
            "ENTER THE FINAL SCORES: \n",
            "Enter final hands-on activity grade (100 ITEMS): 100\n",
            "Enter final quiz grade (100 ITEMS): 100\n",
            "Enter final assignment grade (100 ITEMS): 100\n",
            "Final Class Standing (CS) is:  100.0\n",
            "Enter final exam score (100 ITEMS): 100\n",
            "Final Grade is:  100.0\n",
            "----------------------\n",
            "~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
            "SUMMARY OF THE STUDENT GRADES\n",
            "Name: TASK TRIAL\n",
            "PRELIM GRADE: 100.0\n",
            "MIDTERM GRADE: 100.0\n",
            "FINAL GRADE: 100.0\n",
            "~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Supplementary Activity**:\n",
        "\n",
        "1.\t Test 3 students from the program you created.\n",
        "2.\tThe program should show the name of the student, the PRELIM, MIDTERM and FINAL grades.\n",
        "3.\tConvert the final grade into the UCCs numerical grade. Please refer to the grading system.\n",
        "\n"
      ],
      "metadata": {
        "id": "bV8A708BKFuC"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "FIRST STUDENT: Joshua Catahan"
      ],
      "metadata": {
        "id": "eXqfm_giFIHS"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import sys  # Library for termination of the code\n",
        "\n",
        "# Function to get and validate scores\n",
        "def get_score(name):\n",
        "    score = float(input(f\"Enter {name} (100 ITEMS): \"))\n",
        "    if score < 0 or score > 100:\n",
        "        print(\"Invalid Input! PLEASE RESTART THE CODE\")\n",
        "        sys.exit()\n",
        "    return score\n",
        "\n",
        "# Function to calculate grades\n",
        "def calculate_prelim_midterm(cs, exam):\n",
        "    return cs * 0.5 + exam * 0.5\n",
        "\n",
        "def calculate_final(prev_grade, cs, exam):\n",
        "    return (prev_grade * 1 / 3) + (2 / 3) * (cs * 0.5 + exam * 0.5)\n",
        "\n",
        "# Main Program\n",
        "name = input(\"Enter name: \")\n",
        "print(\"<><><><><><><><><><><><><><><><><>\")  # SPACE\n",
        "\n",
        "# PRELIM GRADE\n",
        "print(\"ENTER THE PRELIM SCORES: \")\n",
        "PHOA, PQUIZ, PAS = get_score(\"prelim hands-on activity grade\"), get_score(\"prelim quiz grade\"), get_score(\"prelim assignment grade\")\n",
        "PCS = PHOA * 0.5 + PQUIZ * 0.3 + PAS * 0.2\n",
        "print(\"Prelim Class Standing (CS) is: \", PCS)\n",
        "PEX = get_score(\"prelim exam score\")\n",
        "PG = calculate_prelim_midterm(PCS, PEX)\n",
        "print(\"Prelim Grade is: \", PG)\n",
        "print(\"----------------------\")  # SPACE\n",
        "\n",
        "# MIDTERM GRADE\n",
        "print(\"ENTER THE MIDTERM SCORES: \")\n",
        "MHOA, MQUIZ, MAS = get_score(\"midterm hands-on activity grade\"), get_score(\"midterm quiz grade\"), get_score(\"midterm assignment grade\")\n",
        "MCS = MHOA * 0.5 + MQUIZ * 0.3 + MAS * 0.2\n",
        "print(\"Midterm Class Standing (CS) is: \", MCS)\n",
        "MEX = get_score(\"midterm exam score\")\n",
        "MG = calculate_prelim_midterm(MCS, MEX)\n",
        "print(\"Midterm Grade is: \", MG)\n",
        "print(\"----------------------\")  # SPACE\n",
        "\n",
        "# FINAL GRADE\n",
        "print(\"ENTER THE FINAL SCORES: \")\n",
        "FHOA, FQUIZ, FAS = get_score(\"final hands-on activity grade\"), get_score(\"final quiz grade\"), get_score(\"final assignment grade\")\n",
        "FCS = FHOA * 0.5 + FQUIZ * 0.3 + FAS * 0.2\n",
        "print(\"Final Class Standing (CS) is: \", FCS)\n",
        "FEX = get_score(\"final exam score\")\n",
        "FG = calculate_final(MG, FCS, FEX)\n",
        "print(\"Final Grade is: \", FG)\n",
        "print(\"----------------------\")  # SPACE\n",
        "\n",
        "# SUMMARY\n",
        "print(\"~~~~~~~~~~~~~~~~~~~~~~~~~~\")  # SPACE\n",
        "print(\"SUMMARY OF THE STUDENT GRADES\")\n",
        "print(f\"Name: {name}\\nPRELIM GRADE: {PG}\\nMIDTERM GRADE: {MG}\\nFINAL GRADE: {FG}\")\n",
        "print(\"~~~~~~~~~~~~~~~~~~~~~~~~~~\")  # SPACE\n",
        "\n",
        "# FINAL GRADE POINT EQUIVALENCE\n",
        "if 99 <= FG <= 100:\n",
        "    print(\"FINAL GRADE POINT EQUIVALENCE: 1.00\")\n",
        "elif 95 <= FG <= 98:\n",
        "    print(\"FINAL GRADE POINT EQUIVALENCE: 1.25\")\n",
        "elif 90 <= FG <= 94:\n",
        "    print(\"FINAL GRADE POINT EQUIVALENCE: 1.50\")\n",
        "elif 85 <= FG <= 89:\n",
        "    print(\"FINAL GRADE POINT EQUIVALENCE: 1.75\")\n",
        "elif 80 <= FG <= 84:\n",
        "    print(\"FINAL GRADE POINT EQUIVALENCE: 2.00\")\n",
        "elif 75 <= FG <= 79:\n",
        "    print(\"FINAL GRADE POINT EQUIVALENCE: 2.25\")\n",
        "elif 70 <= FG <= 74:\n",
        "    print(\"FINAL GRADE POINT EQUIVALENCE: 2.50\")\n",
        "elif 65 <= FG <= 69:\n",
        "    print(\"FINAL GRADE POINT EQUIVALENCE: 2.75\")\n",
        "elif 60 <= FG <= 64:\n",
        "    print(\"FINAL GRADE POINT EQUIVALENCE: 3.00\")\n",
        "else:\n",
        "    print(\"FINAL GRADE POINT EQUIVALENCE: 5.00\")"
      ],
      "metadata": {
        "id": "X2QfbKrmKOJK",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "32e65688-c431-48ad-c7c2-dbfe88b57b5b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter name: Joshua Catahan\n",
            "<><><><><><><><><><><><><><><><><>\n",
            "ENTER THE PRELIM SCORES: \n",
            "Enter prelim hands-on activity grade (100 ITEMS): 100\n",
            "Enter prelim quiz grade (100 ITEMS): 100\n",
            "Enter prelim assignment grade (100 ITEMS): 100\n",
            "Prelim Class Standing (CS) is:  100.0\n",
            "Enter prelim exam score (100 ITEMS): 100\n",
            "Prelim Grade is:  100.0\n",
            "----------------------\n",
            "ENTER THE MIDTERM SCORES: \n",
            "Enter midterm hands-on activity grade (100 ITEMS): 100\n",
            "Enter midterm quiz grade (100 ITEMS): 100\n",
            "Enter midterm assignment grade (100 ITEMS): 100\n",
            "Midterm Class Standing (CS) is:  100.0\n",
            "Enter midterm exam score (100 ITEMS): 100\n",
            "Midterm Grade is:  100.0\n",
            "----------------------\n",
            "ENTER THE FINAL SCORES: \n",
            "Enter final hands-on activity grade (100 ITEMS): 100\n",
            "Enter final quiz grade (100 ITEMS): 100\n",
            "Enter final assignment grade (100 ITEMS): 100\n",
            "Final Class Standing (CS) is:  100.0\n",
            "Enter final exam score (100 ITEMS): 100\n",
            "Final Grade is:  100.0\n",
            "----------------------\n",
            "~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
            "SUMMARY OF THE STUDENT GRADES\n",
            "Name: Joshua Catahan\n",
            "PRELIM GRADE: 100.0\n",
            "MIDTERM GRADE: 100.0\n",
            "FINAL GRADE: 100.0\n",
            "~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
            "FINAL GRADE POINT EQUIVALENCE: 1.00\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "I62Ja7uEfMD0"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "SECOND STUDENT: Si Juan"
      ],
      "metadata": {
        "id": "on4iJndpGKnL"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import sys  # Library for termination of the code\n",
        "\n",
        "# Function to get and validate scores\n",
        "def get_score(name):\n",
        "    score = float(input(f\"Enter {name} (100 ITEMS): \"))\n",
        "    if score < 0 or score > 100:\n",
        "        print(\"Invalid Input! PLEASE RESTART THE CODE\")\n",
        "        sys.exit()\n",
        "    return score\n",
        "\n",
        "# Function to calculate grades\n",
        "def calculate_prelim_midterm(cs, exam):\n",
        "    return cs * 0.5 + exam * 0.5\n",
        "\n",
        "def calculate_final(prev_grade, cs, exam):\n",
        "    return (prev_grade * 1 / 3) + (2 / 3) * (cs * 0.5 + exam * 0.5)\n",
        "\n",
        "# Main Program\n",
        "name = input(\"Enter name: \")\n",
        "print(\"<><><><><><><><><><><><><><><><><>\")  # SPACE\n",
        "\n",
        "# PRELIM GRADE\n",
        "print(\"ENTER THE PRELIM SCORES: \")\n",
        "PHOA, PQUIZ, PAS = get_score(\"prelim hands-on activity grade\"), get_score(\"prelim quiz grade\"), get_score(\"prelim assignment grade\")\n",
        "PCS = PHOA * 0.5 + PQUIZ * 0.3 + PAS * 0.2\n",
        "print(\"Prelim Class Standing (CS) is: \", PCS)\n",
        "PEX = get_score(\"prelim exam score\")\n",
        "PG = calculate_prelim_midterm(PCS, PEX)\n",
        "print(\"Prelim Grade is: \", PG)\n",
        "print(\"----------------------\")  # SPACE\n",
        "\n",
        "# MIDTERM GRADE\n",
        "print(\"ENTER THE MIDTERM SCORES: \")\n",
        "MHOA, MQUIZ, MAS = get_score(\"midterm hands-on activity grade\"), get_score(\"midterm quiz grade\"), get_score(\"midterm assignment grade\")\n",
        "MCS = MHOA * 0.5 + MQUIZ * 0.3 + MAS * 0.2\n",
        "print(\"Midterm Class Standing (CS) is: \", MCS)\n",
        "MEX = get_score(\"midterm exam score\")\n",
        "MG = calculate_prelim_midterm(MCS, MEX)\n",
        "print(\"Midterm Grade is: \", MG)\n",
        "print(\"----------------------\")  # SPACE\n",
        "\n",
        "# FINAL GRADE\n",
        "print(\"ENTER THE FINAL SCORES: \")\n",
        "FHOA, FQUIZ, FAS = get_score(\"final hands-on activity grade\"), get_score(\"final quiz grade\"), get_score(\"final assignment grade\")\n",
        "FCS = FHOA * 0.5 + FQUIZ * 0.3 + FAS * 0.2\n",
        "print(\"Final Class Standing (CS) is: \", FCS)\n",
        "FEX = get_score(\"final exam score\")\n",
        "FG = calculate_final(MG, FCS, FEX)\n",
        "print(\"Final Grade is: \", FG)\n",
        "print(\"----------------------\")  # SPACE\n",
        "\n",
        "# SUMMARY\n",
        "print(\"~~~~~~~~~~~~~~~~~~~~~~~~~~\")  # SPACE\n",
        "print(\"SUMMARY OF THE STUDENT GRADES\")\n",
        "print(f\"Name: {name}\\nPRELIM GRADE: {PG}\\nMIDTERM GRADE: {MG}\\nFINAL GRADE: {FG}\")\n",
        "print(\"~~~~~~~~~~~~~~~~~~~~~~~~~~\")  # SPACE\n",
        "\n",
        "# FINAL GRADE POINT EQUIVALENCE\n",
        "if 99 <= FG <= 100:\n",
        "    print(\"FINAL GRADE POINT EQUIVALENCE: 1.00\")\n",
        "elif 95 <= FG <= 98:\n",
        "    print(\"FINAL GRADE POINT EQUIVALENCE: 1.25\")\n",
        "elif 90 <= FG <= 94:\n",
        "    print(\"FINAL GRADE POINT EQUIVALENCE: 1.50\")\n",
        "elif 85 <= FG <= 89:\n",
        "    print(\"FINAL GRADE POINT EQUIVALENCE: 1.75\")\n",
        "elif 80 <= FG <= 84:\n",
        "    print(\"FINAL GRADE POINT EQUIVALENCE: 2.00\")\n",
        "elif 75 <= FG <= 79:\n",
        "    print(\"FINAL GRADE POINT EQUIVALENCE: 2.25\")\n",
        "elif 70 <= FG <= 74:\n",
        "    print(\"FINAL GRADE POINT EQUIVALENCE: 2.50\")\n",
        "elif 65 <= FG <= 69:\n",
        "    print(\"FINAL GRADE POINT EQUIVALENCE: 2.75\")\n",
        "elif 60 <= FG <= 64:\n",
        "    print(\"FINAL GRADE POINT EQUIVALENCE: 3.00\")\n",
        "else:\n",
        "    print(\"FINAL GRADE POINT EQUIVALENCE: 5.00\")"
      ],
      "metadata": {
        "id": "H0oI4lxIFDtt",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "8997ff4a-4bdd-4353-f32d-86a56ac711ea"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter name: Si Juan\n",
            "<><><><><><><><><><><><><><><><><>\n",
            "ENTER THE PRELIM SCORES: \n",
            "Enter prelim hands-on activity grade (100 ITEMS): 59.9\n",
            "Enter prelim quiz grade (100 ITEMS): 59.9\n",
            "Enter prelim assignment grade (100 ITEMS): 59.9\n",
            "Prelim Class Standing (CS) is:  59.900000000000006\n",
            "Enter prelim exam score (100 ITEMS): 59.9\n",
            "Prelim Grade is:  59.900000000000006\n",
            "----------------------\n",
            "ENTER THE MIDTERM SCORES: \n",
            "Enter midterm hands-on activity grade (100 ITEMS): 59.9\n",
            "Enter midterm quiz grade (100 ITEMS): 59.9\n",
            "Enter midterm assignment grade (100 ITEMS): 59.9\n",
            "Midterm Class Standing (CS) is:  59.900000000000006\n",
            "Enter midterm exam score (100 ITEMS): 59.9\n",
            "Midterm Grade is:  59.900000000000006\n",
            "----------------------\n",
            "ENTER THE FINAL SCORES: \n",
            "Enter final hands-on activity grade (100 ITEMS): 59.9\n",
            "Enter final quiz grade (100 ITEMS): 59.9\n",
            "Enter final assignment grade (100 ITEMS): 59.9\n",
            "Final Class Standing (CS) is:  59.900000000000006\n",
            "Enter final exam score (100 ITEMS): 59.9\n",
            "Final Grade is:  59.900000000000006\n",
            "----------------------\n",
            "~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
            "SUMMARY OF THE STUDENT GRADES\n",
            "Name: Si Juan\n",
            "PRELIM GRADE: 59.900000000000006\n",
            "MIDTERM GRADE: 59.900000000000006\n",
            "FINAL GRADE: 59.900000000000006\n",
            "~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
            "FINAL GRADE POINT EQUIVALENCE: 5.00\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "THIRD STUDENT: Si Pedro"
      ],
      "metadata": {
        "id": "ziXHsBI1Gl4N"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import sys  # Library for termination of the code\n",
        "\n",
        "# Function to get and validate scores\n",
        "def get_score(name):\n",
        "    score = float(input(f\"Enter {name} (100 ITEMS): \"))\n",
        "    if score < 0 or score > 100:\n",
        "        print(\"Invalid Input! PLEASE RESTART THE CODE\")\n",
        "        sys.exit()\n",
        "    return score\n",
        "\n",
        "# Function to calculate grades\n",
        "def calculate_prelim_midterm(cs, exam):\n",
        "    return cs * 0.5 + exam * 0.5\n",
        "\n",
        "def calculate_final(prev_grade, cs, exam):\n",
        "    return (prev_grade * 1 / 3) + (2 / 3) * (cs * 0.5 + exam * 0.5)\n",
        "\n",
        "# Main Program\n",
        "name = input(\"Enter name: \")\n",
        "print(\"<><><><><><><><><><><><><><><><><>\")  # SPACE\n",
        "\n",
        "# PRELIM GRADE\n",
        "print(\"ENTER THE PRELIM SCORES: \")\n",
        "PHOA, PQUIZ, PAS = get_score(\"prelim hands-on activity grade\"), get_score(\"prelim quiz grade\"), get_score(\"prelim assignment grade\")\n",
        "PCS = PHOA * 0.5 + PQUIZ * 0.3 + PAS * 0.2\n",
        "print(\"Prelim Class Standing (CS) is: \", PCS)\n",
        "PEX = get_score(\"prelim exam score\")\n",
        "PG = calculate_prelim_midterm(PCS, PEX)\n",
        "print(\"Prelim Grade is: \", PG)\n",
        "print(\"----------------------\")  # SPACE\n",
        "\n",
        "# MIDTERM GRADE\n",
        "print(\"ENTER THE MIDTERM SCORES: \")\n",
        "MHOA, MQUIZ, MAS = get_score(\"midterm hands-on activity grade\"), get_score(\"midterm quiz grade\"), get_score(\"midterm assignment grade\")\n",
        "MCS = MHOA * 0.5 + MQUIZ * 0.3 + MAS * 0.2\n",
        "print(\"Midterm Class Standing (CS) is: \", MCS)\n",
        "MEX = get_score(\"midterm exam score\")\n",
        "MG = calculate_prelim_midterm(MCS, MEX)\n",
        "print(\"Midterm Grade is: \", MG)\n",
        "print(\"----------------------\")  # SPACE\n",
        "\n",
        "# FINAL GRADE\n",
        "print(\"ENTER THE FINAL SCORES: \")\n",
        "FHOA, FQUIZ, FAS = get_score(\"final hands-on activity grade\"), get_score(\"final quiz grade\"), get_score(\"final assignment grade\")\n",
        "FCS = FHOA * 0.5 + FQUIZ * 0.3 + FAS * 0.2\n",
        "print(\"Final Class Standing (CS) is: \", FCS)\n",
        "FEX = get_score(\"final exam score\")\n",
        "FG = calculate_final(MG, FCS, FEX)\n",
        "print(\"Final Grade is: \", FG)\n",
        "print(\"----------------------\")  # SPACE\n",
        "\n",
        "# SUMMARY\n",
        "print(\"~~~~~~~~~~~~~~~~~~~~~~~~~~\")  # SPACE\n",
        "print(\"SUMMARY OF THE STUDENT GRADES\")\n",
        "print(f\"Name: {name}\\nPRELIM GRADE: {PG}\\nMIDTERM GRADE: {MG}\\nFINAL GRADE: {FG}\")\n",
        "print(\"~~~~~~~~~~~~~~~~~~~~~~~~~~\")  # SPACE\n",
        "\n",
        "# FINAL GRADE POINT EQUIVALENCE\n",
        "if 99 <= FG <= 100:\n",
        "    print(\"FINAL GRADE POINT EQUIVALENCE: 1.00\")\n",
        "elif 95 <= FG <= 98:\n",
        "    print(\"FINAL GRADE POINT EQUIVALENCE: 1.25\")\n",
        "elif 90 <= FG <= 94:\n",
        "    print(\"FINAL GRADE POINT EQUIVALENCE: 1.50\")\n",
        "elif 85 <= FG <= 89:\n",
        "    print(\"FINAL GRADE POINT EQUIVALENCE: 1.75\")\n",
        "elif 80 <= FG <= 84:\n",
        "    print(\"FINAL GRADE POINT EQUIVALENCE: 2.00\")\n",
        "elif 75 <= FG <= 79:\n",
        "    print(\"FINAL GRADE POINT EQUIVALENCE: 2.25\")\n",
        "elif 70 <= FG <= 74:\n",
        "    print(\"FINAL GRADE POINT EQUIVALENCE: 2.50\")\n",
        "elif 65 <= FG <= 69:\n",
        "    print(\"FINAL GRADE POINT EQUIVALENCE: 2.75\")\n",
        "elif 60 <= FG <= 64:\n",
        "    print(\"FINAL GRADE POINT EQUIVALENCE: 3.00\")\n",
        "else:\n",
        "    print(\"FINAL GRADE POINT EQUIVALENCE: 5.00\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "S3ATkG4EGsDb",
        "outputId": "0a8b48c7-fe81-4955-ef08-65bb0804356c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter name: Si Pedro\n",
            "<><><><><><><><><><><><><><><><><>\n",
            "ENTER THE PRELIM SCORES: \n",
            "Enter prelim hands-on activity grade (100 ITEMS): 60\n",
            "Enter prelim quiz grade (100 ITEMS): 60\n",
            "Enter prelim assignment grade (100 ITEMS): 60\n",
            "Prelim Class Standing (CS) is:  60.0\n",
            "Enter prelim exam score (100 ITEMS): 60\n",
            "Prelim Grade is:  60.0\n",
            "----------------------\n",
            "ENTER THE MIDTERM SCORES: \n",
            "Enter midterm hands-on activity grade (100 ITEMS): 60\n",
            "Enter midterm quiz grade (100 ITEMS): 60\n",
            "Enter midterm assignment grade (100 ITEMS): 60\n",
            "Midterm Class Standing (CS) is:  60.0\n",
            "Enter midterm exam score (100 ITEMS): 60\n",
            "Midterm Grade is:  60.0\n",
            "----------------------\n",
            "ENTER THE FINAL SCORES: \n",
            "Enter final hands-on activity grade (100 ITEMS): 60\n",
            "Enter final quiz grade (100 ITEMS): 60\n",
            "Enter final assignment grade (100 ITEMS): 60\n",
            "Final Class Standing (CS) is:  60.0\n",
            "Enter final exam score (100 ITEMS): 60\n",
            "Final Grade is:  60.0\n",
            "----------------------\n",
            "~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
            "SUMMARY OF THE STUDENT GRADES\n",
            "Name: Si Pedro\n",
            "PRELIM GRADE: 60.0\n",
            "MIDTERM GRADE: 60.0\n",
            "FINAL GRADE: 60.0\n",
            "~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
            "FINAL GRADE POINT EQUIVALENCE: 3.00\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "**Questions**: (write your answers in blue font color and questions in black)\n",
        "\n",
        "1.   How does using functions in Python help make the code more readable and maintainable, especially when handling repetitive tasks? <font color = blue>Using functions in Python makes the code easier to read and manage because we can reuse the same logic without repeating ourselves. It helps keep the code short and organized. This also reduces the chance of errors by isolating specific tasks into their own functions.</font>\n",
        "2. What advantages do you see in breaking down a complex task (like grade calculation) into smaller, more manageable pieces, and how does this approach benefit the clarity of the code? <font color = blue>Breaking down tasks like grade calculation into smaller parts helps keep the code clean and simple, making it easier to understand and update later. This approach makes the whole process less overwhelming. It also allows for easier debugging since each part is simpler to check.</font>"
      ],
      "metadata": {
        "id": "0CYvOMNPKNEq"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Conclusion**:\n",
        "Through this process, I’ve learned how much cleaner and simpler the Python language is compared to C++. By using Python functions, I was able to create shorter lines of code. In this activity, I initially tried to write the code in C++, and when compared to Python, it was much longer and messier. Of course, this was partly due to my lack of knowledge at the time. As I continued, I realized that by handling tasks like class standing and exams separately, the code became cleaner and easier to understand. I also saw that when all inputs are the same, like 100 in this case, the calculations remain consistent, which helps ensure the accuracy of the code. In the end, the grade point equivalence worked as expected, clearly showing how grades translate into the point system. Overall, this laboratory activity has further enhanced my understanding of how classes and objects can be used effectively."
      ],
      "metadata": {
        "id": "f8oM9wqYKuO1"
      }
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.7.3"
    },
    "colab": {
      "provenance": [],
      "include_colab_link": true
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}